<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Language Basics on SL Notebook</title><link>https://slnotes.blog.castrillon.ch/go/language-basics/</link><description>Recent content in Language Basics on SL Notebook</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Thu, 16 Feb 2023 19:42:50 +0100</lastBuildDate><atom:link href="https://slnotes.blog.castrillon.ch/go/language-basics/index.xml" rel="self" type="application/rss+xml"/><item><title>Variables</title><link>https://slnotes.blog.castrillon.ch/go/language-basics/variables/</link><pubDate>Thu, 16 Feb 2023 19:42:50 +0100</pubDate><guid>https://slnotes.blog.castrillon.ch/go/language-basics/variables/</guid><description>Types Go is a statically typed language. This means that variables are assigned a type when created and can only hold values of that type. This helps with avoiding runtime errors by catching them at compile-time
Go supports several types. The most common being
Type Description Zero Value int Integer value, can be 64 or 32 bits depending on the system it runs on 0 bool Boolean value false string String of UTF-8 characters &amp;quot;&amp;quot; slice Growable list of a type nil map Key-value data structure nil struct A collection of named attributes (Similar to objects in other languages) Empty struct interface A type that holds a value with defined methods nil pointers A type that stores an address in memory of a variable not the variable nil channels A pipe (buffered or not) for sending data asynchronously nil Other types include more control over the size of the variables, as well as some particular use cases like complex numbers:</description></item><item><title>Packages</title><link>https://slnotes.blog.castrillon.ch/go/language-basics/packages/</link><pubDate>Thu, 16 Feb 2023 19:42:30 +0100</pubDate><guid>https://slnotes.blog.castrillon.ch/go/language-basics/packages/</guid><description>Similar to libraries or modules in other languages, go uses the concept of packages to refer to reusable blocks of code that can be imported and used in other code.
Working with packages is straight forward. One can:
Declare packages: When structuring an application, to split the functionality logically Import packages: While coding to use functions from the standard library, third party packages or even other packages in the app Declaring packages At the beginning of each .</description></item></channel></rss>