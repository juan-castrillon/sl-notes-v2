<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Execution on SL Notebook</title><link>https://slnotes.blog.castrillon.ch/ansible/execution/</link><description>Recent content in Execution on SL Notebook</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Tue, 13 May 2025 08:07:16 +0200</lastBuildDate><atom:link href="https://slnotes.blog.castrillon.ch/ansible/execution/index.xml" rel="self" type="application/rss+xml"/><item><title>Templates</title><link>https://slnotes.blog.castrillon.ch/ansible/execution/templates/</link><pubDate>Tue, 13 May 2025 08:07:16 +0200</pubDate><guid>https://slnotes.blog.castrillon.ch/ansible/execution/templates/</guid><description>Ansible templates are files used to dynamically generate configuration files or scripts. These templates are written using the Jinja2 templating language, which allows to include variables, loops, conditionals, and more.
Templates are typically stored in the templates directory of an Ansible role or playbook, and they are processed by the template module in Ansible. When you use this module, you specify the source template file and the destination path on the target machine.</description></item><item><title>Handlers</title><link>https://slnotes.blog.castrillon.ch/ansible/execution/handlers/</link><pubDate>Mon, 12 May 2025 17:50:43 +0200</pubDate><guid>https://slnotes.blog.castrillon.ch/ansible/execution/handlers/</guid><description>There is a &amp;ldquo;special&amp;rdquo; kind of tasks called handlers, which only run when triggered by changes in another tasks.
This behavior substitutes the pattern of combining register with when: var changed. It allows for more flexibility and easier management when multiple tasks can trigger the same handler
In roles, there is a handlers directory to place them, but they can also be added to a playbook.
They are triggered by notify and their name, which must be static (more info here)</description></item><item><title>Roles</title><link>https://slnotes.blog.castrillon.ch/ansible/execution/roles/</link><pubDate>Mon, 12 May 2025 17:46:51 +0200</pubDate><guid>https://slnotes.blog.castrillon.ch/ansible/execution/roles/</guid><description>Roles are a way to organize ansible tasks (not plays) in order to allow them to be reused and easily shared They provide a predefined structure that allows to group tasks with variables, templates, files, etc. Similar to modules in terraform In the playbooks they can be called like: - hosts: all become: true roles: - myroleRoles can also be used in a task with import_role. When running with roles ansible will execute the roles after any pre_task but before any other task in the play.</description></item><item><title>Variables</title><link>https://slnotes.blog.castrillon.ch/ansible/execution/variables/</link><pubDate>Mon, 12 May 2025 17:46:09 +0200</pubDate><guid>https://slnotes.blog.castrillon.ch/ansible/execution/variables/</guid><description>Referenced in the playbook as {{ name }} variables allow for consolidation of playbooks as well as flexibility.
Variables can be defined:
In the inventory file. Particular values per host or group can be defined and will be picked up [mygroup] 1.2.3.4 apache_package=apache2 [mygroup:vars] other_var=something In playbooks themselves using vars block or vars_file for external files
In a host_vars directory. In this standard directory, each file corresponds to a host (either IP or hostname) and ansible will pick up automatically the variables defined there for each host.</description></item><item><title>Playbooks</title><link>https://slnotes.blog.castrillon.ch/ansible/execution/playbooks/</link><pubDate>Mon, 12 May 2025 17:43:24 +0200</pubDate><guid>https://slnotes.blog.castrillon.ch/ansible/execution/playbooks/</guid><description>Ansible Playbooks offer a repeatable, reusable, simple configuration management and multi-machine deployment system. They are files that allow to define a set of instructions to execute to reach a desired state. Sames as the [ad-hoc]({&amp;lt; ref &amp;ldquo;ansible/execution/adhoc&amp;rdquo; &amp;gt;}}) commands, they make use of modules to execute things.
They are written in YAML format and run with the ansible-playbook binary
ansible-playbook -K my_plabook.ymlAn example of a simple playbook can be seen below:</description></item><item><title>Ad-hoc commands</title><link>https://slnotes.blog.castrillon.ch/ansible/execution/adhoc/</link><pubDate>Mon, 12 May 2025 17:36:00 +0200</pubDate><guid>https://slnotes.blog.castrillon.ch/ansible/execution/adhoc/</guid><description>Although the core of ansible is using playbooks, the cli tool can be used to directly execute commands or run modules. They work great for tasks that are run not that often or tests.
For running a command the following is needed:
Inventory group name Key to use when connecting via SSH Inventory file location Module or command This can all be passed in the cli. For example, the following command uses the ping module to verify connection to all servers:</description></item><item><title>Inventory</title><link>https://slnotes.blog.castrillon.ch/ansible/execution/inventory/</link><pubDate>Mon, 12 May 2025 17:29:21 +0200</pubDate><guid>https://slnotes.blog.castrillon.ch/ansible/execution/inventory/</guid><description>To know which machines are available to control, ansible needs an inventory. This simply describes (with the ip addresses) which machines are to be controlled.
The simplest inventory is a single file with a list of hosts and groups. The default location for this file is /etc/ansible/hosts. However, using the -i &amp;lt;path or expression&amp;gt; option(s) or using the configuration system the file can be changed.
Grouping The inventory files allow also to group and set up different configuration values for each server.</description></item></channel></rss>