<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Git on SL Notebook</title><link>https://slnotes.blog.castrillon.ch/git/</link><description>Recent content in Git on SL Notebook</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Thu, 02 Feb 2023 18:37:18 +0100</lastBuildDate><atom:link href="https://slnotes.blog.castrillon.ch/git/index.xml" rel="self" type="application/rss+xml"/><item><title>Collaboration</title><link>https://slnotes.blog.castrillon.ch/git/collaboration/</link><pubDate>Thu, 02 Feb 2023 18:37:18 +0100</pubDate><guid>https://slnotes.blog.castrillon.ch/git/collaboration/</guid><description/></item><item><title>Undo Changes</title><link>https://slnotes.blog.castrillon.ch/git/undo-changes/</link><pubDate>Wed, 04 Jan 2023 21:31:59 +0100</pubDate><guid>https://slnotes.blog.castrillon.ch/git/undo-changes/</guid><description>Git offers different commands that allow to &amp;ldquo;travel back in time&amp;rdquo; or undo changes
git checkout Detached HEAD Using git checkout &amp;lt;COMMIT&amp;gt; leads to Detached HEAD state.
This state, refers to when HEAD, instead of pointing to a branch reference (like usually) points to a specific commit.
This state is useful for:
Looking around the state of a repo Make experimental changes They can be committed and discarded just by switching to a branch They can be kept if creating a new branch from the detached HEAD The last option, allows to branch out on a particular commit in the repo history by reattaching the HEAD</description></item><item><title>Stashing</title><link>https://slnotes.blog.castrillon.ch/git/stashing/</link><pubDate>Sat, 31 Dec 2022 17:25:45 +0100</pubDate><guid>https://slnotes.blog.castrillon.ch/git/stashing/</guid><description>What is stashing? git stash temporarily shelves (or stashes) changes made in a branch, that are not yet commited. This ways, you can store the changes without making a commit and switch context (or branch) to work on something else.
It avoids conflicts and taking changes with you when you switch branches
How to work with stash? The git stash works like a traditional stack. This means is a LIFO data structure in which data can be pushed or popped.</description></item><item><title>Diffs</title><link>https://slnotes.blog.castrillon.ch/git/diffs/</link><pubDate>Tue, 27 Dec 2022 18:15:21 +0100</pubDate><guid>https://slnotes.blog.castrillon.ch/git/diffs/</guid><description>What is a diff? A diff is the output of using the git diff command. Is a text that allows to view differences or changes between commits, branches, files, working directory and many other things.
Example:
diff --git a/rainbow.txt b/rainbow.txt index 0b75516..26ec8e7 100644 --- a/rainbow.txt +++ b/rainbow.txt @@ -3,4 +3,5 @@ orange yellow green blue -purple +indigo +violet How to read a diff Here are the more meaningful lines in the example below:</description></item><item><title>Branches</title><link>https://slnotes.blog.castrillon.ch/git/branches/</link><pubDate>Sat, 24 Dec 2022 11:35:22 +0100</pubDate><guid>https://slnotes.blog.castrillon.ch/git/branches/</guid><description>What are branches? In GIT each commit, identified by a unique hash, has a reference to its parent commit
Branches can be tought of as alernate timelines in a project. They exist at the same time but are completely different contexts, so changes in a branch dont affect other branches.
In detail, branching happens when a commit has more that one child commit. In a techinical manner, branches are a reference to a commit (that has a series of parent commits) like shown below:</description></item><item><title>Commiting</title><link>https://slnotes.blog.castrillon.ch/git/commiting/</link><pubDate>Thu, 22 Dec 2022 22:02:23 +0100</pubDate><guid>https://slnotes.blog.castrillon.ch/git/commiting/</guid><description>The key component of git is the commits. A commit is single point in the Git history; the entire history of a project is represented as a set of interrelated commits.
Good practice By good practice, commits should be atomic. This means each commit should relate to only one feature. This makes it easier to control, and roll back.
Commit Message A commit contains the current contents of the index and the given log message describing the changes.</description></item><item><title>Basic Commands</title><link>https://slnotes.blog.castrillon.ch/git/basic-commands/</link><pubDate>Thu, 22 Dec 2022 16:07:48 +0100</pubDate><guid>https://slnotes.blog.castrillon.ch/git/basic-commands/</guid><description>Below are some of the most used commands when using git from the command line:
git init Initializes a git repository in the current directory. This is done by creating a hidden .git directory. Git docs If used with a name as an argument like git init exampleIt will first create a folder called example and inside this folder initialize the repo.
Tip To make a directory not a git repository anymore, just delete the hidden .</description></item></channel></rss>