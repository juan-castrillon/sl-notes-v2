<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Terraform on SL Notebook</title><link>https://slnotes.blog.castrillon.ch/terraform/</link><description>Recent content in Terraform on SL Notebook</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Tue, 21 Nov 2023 18:08:56 +0100</lastBuildDate><atom:link href="https://slnotes.blog.castrillon.ch/terraform/index.xml" rel="self" type="application/rss+xml"/><item><title>Workspaces</title><link>https://slnotes.blog.castrillon.ch/terraform/workspaces/</link><pubDate>Tue, 21 Nov 2023 18:08:56 +0100</pubDate><guid>https://slnotes.blog.castrillon.ch/terraform/workspaces/</guid><description>Workspaces are used to managed multiple instances of the same infrastructure. They are useful for separating environments (dev, staging, prod) or for managing multiple instances of the same infrastructure (multiple Kubernetes clusters, multiple web apps, etc).
Workspaces are supported by the different backends (local, remote, and enhanced). In terraform cloud (remote backend) these don&amp;rsquo;t map directly to workspaces in the UI. The &amp;ldquo;cloud&amp;rdquo; workspace is used for organization, similar to directories, and the &amp;ldquo;cli&amp;rdquo; workspace is used for environment management.</description></item><item><title>Terraform Enterprise</title><link>https://slnotes.blog.castrillon.ch/terraform/enterprise/</link><pubDate>Tue, 21 Nov 2023 17:57:09 +0100</pubDate><guid>https://slnotes.blog.castrillon.ch/terraform/enterprise/</guid><description>Terraform enterprise is a self-hosted version of Terraform Cloud. It offers enterprise-grade features such as audit logging, SAML SSO, and role-based access control.
It requires a license and can be installed on-premises or in the cloud.
Requirements They depend on the operational mode (how data should be stored):
External services mode: Requires a PostgreSQL database and a storage bucket (S3, GCS, Azure Blob Storage, etc). Mounted disk mode: Requires a mounted disk (NFS, EFS, etc).</description></item><item><title>Language</title><link>https://slnotes.blog.castrillon.ch/terraform/language/</link><pubDate>Thu, 16 Nov 2023 20:26:28 +0100</pubDate><guid>https://slnotes.blog.castrillon.ch/terraform/language/</guid><description>Terraform files (normally with the extension .tf) are written in HashiCorp Configuration Language (HCL). It is a declarative language, meaning that you describe the desired state of the infrastructure, and Terraform will figure out how to create that state.
Basic Syntax The main building block of HCL is the block. It is defined by a block type, a label and a body:
block_type label { key = &amp;#34;value&amp;#34; }Here:
Values can be strings, numbers, booleans, lists or maps.</description></item><item><title>Modules</title><link>https://slnotes.blog.castrillon.ch/terraform/modules/</link><pubDate>Fri, 10 Nov 2023 18:45:24 +0100</pubDate><guid>https://slnotes.blog.castrillon.ch/terraform/modules/</guid><description/></item><item><title>Logs</title><link>https://slnotes.blog.castrillon.ch/terraform/logs/</link><pubDate>Fri, 10 Nov 2023 18:24:32 +0100</pubDate><guid>https://slnotes.blog.castrillon.ch/terraform/logs/</guid><description>Terraform can log to a file or to the standard output. The log level can be set to TRACE, DEBUG, INFO, WARN or ERROR.
Logging is controlled by the TF_LOG environment variable. Different log levels can be set for different components by setting the TF_LOG_[COMPONENT] environment variable. For example, TF_LOG_PROVIDER sets the log level for providers and TF_LOG_CORE sets the log level for the core.
The TF_LOG_PATH environment variable can be used to set the path to the log file.</description></item><item><title>Drift</title><link>https://slnotes.blog.castrillon.ch/terraform/drift/</link><pubDate>Thu, 09 Nov 2023 18:41:58 +0100</pubDate><guid>https://slnotes.blog.castrillon.ch/terraform/drift/</guid><description>Drift is the difference between the state that is currently in the state file and the real infrastructure.
Drift can be caused by:
manual changes to the infrastructure changes to the infrastructure that were not made with Terraform Managing drift There is three ways to manage drift:
Import the resource into the state file Refresh the state file Replace the resource Replace The -replace flag in apply and plan commands allows to force the replacement of a resource given its address (e.</description></item><item><title>State</title><link>https://slnotes.blog.castrillon.ch/terraform/state/</link><pubDate>Thu, 09 Nov 2023 18:12:45 +0100</pubDate><guid>https://slnotes.blog.castrillon.ch/terraform/state/</guid><description>Terraform stores the state of the infrastructure it manages in a file. This state file is extremely important; it maps various resource metadata to actual cloud resource IDs so that Terraform knows what it is managing.
Terraform uses this local state to create plans and make changes to your infrastructure.
Local state is stored in a file named terraform.tfstate.
State File The state file is a JSON file that contains the following information:</description></item><item><title>Terraform Files</title><link>https://slnotes.blog.castrillon.ch/terraform/terraform-files/</link><pubDate>Wed, 01 Nov 2023 08:56:20 +0100</pubDate><guid>https://slnotes.blog.castrillon.ch/terraform/terraform-files/</guid><description/></item><item><title>Terraform Cloud</title><link>https://slnotes.blog.castrillon.ch/terraform/terraform-cloud/</link><pubDate>Sat, 28 Oct 2023 11:46:19 +0200</pubDate><guid>https://slnotes.blog.castrillon.ch/terraform/terraform-cloud/</guid><description>Terraform Cloud is a SaaS offering that provides remote state storage, version control integration, and additional features for teams to collaborate on changes to infrastructure.
Its free tier is limited to 5 users and 3 concurrent runs. State files are stored in a private bucket on S3. Terraform scripts run in a containerized environment. This means that variable definitions are done directly in the UI and not in a separate file.</description></item><item><title>Commands</title><link>https://slnotes.blog.castrillon.ch/terraform/commands/</link><pubDate>Sat, 28 Oct 2023 11:45:34 +0200</pubDate><guid>https://slnotes.blog.castrillon.ch/terraform/commands/</guid><description>init downloads the provider plugins and modules and initializes the backend stores them in the .terraform folder creates a dependency lock file to enforce the same versions of the providers and modules (.terraform.lock.hcl) with the -upgrade flag, it will upgrade the providers and modules to the latest version that matches the version constraints in the configuration get downloads only modules and stores them in the .terraform folder validate validates the syntax of the terraform files checks for required variables and provider configuration does not check for correctness of the code (e.</description></item><item><title>Basics</title><link>https://slnotes.blog.castrillon.ch/terraform/basics/</link><pubDate>Thu, 30 Mar 2023 18:27:02 +0200</pubDate><guid>https://slnotes.blog.castrillon.ch/terraform/basics/</guid><description>terraform is an open source and cloud agnostic tool declarative files written in hcl
terraform cloud saas remote state storage vc integration workflows collaboration on changes
lifecycle write terraform code init (get dependencies) plan (dry run) validate apply change management procedure that will be followed when resources are modified (change) change automation is creating a constient way of managing changings terraform uses Execution Plans and Resources graphs
plans manual review of changes that needs to be approved can be visualized using the terraform graph command and piping to GraphViz terraform graph | dot -Tsvg &amp;gt; graph.</description></item><item><title>IaC Concepts</title><link>https://slnotes.blog.castrillon.ch/terraform/iac-concepts/</link><pubDate>Wed, 08 Mar 2023 17:47:21 +0100</pubDate><guid>https://slnotes.blog.castrillon.ch/terraform/iac-concepts/</guid><description>What is infrastructure as code (IaC) Writing configuration (in the form of a script) to automate
creation update destruction of cloud infra Allows to share, version and inventory infra
Manually creating infra is error prone, time consuming and not repeatable.
popular iac tools two types Declarative What you see is what you get Explicit Scripting language json yaml, hcl No misconfiguration ARM Templates Azure Blueprints CloudFormation Terraform Imperative Say what you want the rest is filled in Implicit Less verbose Programming languages CDK AWS pulumi With an imperative tool, you define the steps to execute in order to reach the desired solution.</description></item></channel></rss>