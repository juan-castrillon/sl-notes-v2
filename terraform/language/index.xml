<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Language on SL Notebook</title><link>https://juan-castrillon.github.io/sl-notes-v2/terraform/language/index.html</link><description>Recent content in Language on SL Notebook</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Thu, 16 Nov 2023 20:26:28 +0100</lastBuildDate><atom:link href="https://juan-castrillon.github.io/sl-notes-v2/terraform/language/index.xml" rel="self" type="application/rss+xml"/><item><title>Functions</title><link>https://juan-castrillon.github.io/sl-notes-v2/terraform/language/functions/index.html</link><pubDate>Thu, 16 Nov 2023 20:26:28 +0100</pubDate><guid>https://juan-castrillon.github.io/sl-notes-v2/terraform/language/functions/index.html</guid><description>Terraform has many built-in functions that can be used to transform and combine values. They can be used in expressions and interpolations.
Numeric Functions abs: Returns the absolute value of a number. floor: Returns the largest integer value less than or equal to a number. ceil: Returns the smallest integer value greater than or equal to a number. min: Returns the smallest of one or more numbers. max: Returns the largest of one or more numbers.</description></item><item><title>Expressions</title><link>https://juan-castrillon.github.io/sl-notes-v2/terraform/language/expressions/index.html</link><pubDate>Tue, 07 Nov 2023 18:09:52 +0100</pubDate><guid>https://juan-castrillon.github.io/sl-notes-v2/terraform/language/expressions/index.html</guid><description>Expressions are used to refer to or compute values within a configuration. Expressions are used in a number of situations, most commonly in argument values for resources and data sources to express values that cannot be determined until apply time.
Types Primitive Types:
Boolean: true or false Number: 42 or 3.1415 String: &amp;quot;Hello, World&amp;quot; Normally double-quoted, but single-quoted is also valid DOuble quotes allow for escape sequences like \n for newline and also special escapes like $${ to include a literal ${ in the string or %%{ to avoid using interpolation and template syntax.</description></item><item><title>Resource</title><link>https://juan-castrillon.github.io/sl-notes-v2/terraform/language/resource/index.html</link><pubDate>Mon, 06 Nov 2023 18:25:47 +0100</pubDate><guid>https://juan-castrillon.github.io/sl-notes-v2/terraform/language/resource/index.html</guid><description>The resource block defines a resource that exists within the infrastructure. It is the most important block in Terraform.
This is a resource whose state is managed by terraform ,contrary to a data source which is read-only. This means this will be created, updated or deleted by terraform.
Meta-Arguments Meta-arguments are arguments that are available on every resource block. They are used to change the behavior of the resource.
depends_on Explicitly specify the order of creation (or destruction) of resources.</description></item><item><title>Terraform Block</title><link>https://juan-castrillon.github.io/sl-notes-v2/terraform/language/terraform_config/index.html</link><pubDate>Sun, 05 Nov 2023 08:56:20 +0100</pubDate><guid>https://juan-castrillon.github.io/sl-notes-v2/terraform/language/terraform_config/index.html</guid><description>The terraform block is normally the first block in a configuration. It is used to configure the behavior of Terraform itself.
Possible configuration options include:
Required version of Terraform Required providers (the ones that will be downloaded when running terraform init) Backend configuration (where the state file will be stored) Experimental features</description></item><item><title>Variables</title><link>https://juan-castrillon.github.io/sl-notes-v2/terraform/language/variables/index.html</link><pubDate>Sun, 05 Nov 2023 08:56:20 +0100</pubDate><guid>https://juan-castrillon.github.io/sl-notes-v2/terraform/language/variables/index.html</guid><description>Input Variables Input variables are used to parameterize Terraform configurations. They are defined in the root module or a child module.
They are defined using the variable block and normally stored in a different file (e.g. variables.tf).
Each block allows for different arguments:
type: the type of the variable (string, number, bool, list, map, object, tuple, set, any) default: the default value of the variable description: a description of the variable validation: a validation rule(s) for the variable sensitive: whether the variable is sensitive (will not be shown in the output) Example:</description></item></channel></rss>