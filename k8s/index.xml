<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Kubernetes on SL Notebook</title><link>https://slnotes.blog.castrillon.ch/k8s/</link><description>Recent content in Kubernetes on SL Notebook</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Thu, 29 May 2025 17:52:39 +0200</lastBuildDate><atom:link href="https://slnotes.blog.castrillon.ch/k8s/index.xml" rel="self" type="application/rss+xml"/><item><title>Tools</title><link>https://slnotes.blog.castrillon.ch/k8s/tools/</link><pubDate>Thu, 29 May 2025 17:52:39 +0200</pubDate><guid>https://slnotes.blog.castrillon.ch/k8s/tools/</guid><description/></item><item><title>App Configuration</title><link>https://slnotes.blog.castrillon.ch/k8s/appconfig/</link><pubDate>Thu, 29 May 2025 17:42:03 +0200</pubDate><guid>https://slnotes.blog.castrillon.ch/k8s/appconfig/</guid><description/></item><item><title>Scheduling</title><link>https://slnotes.blog.castrillon.ch/k8s/scheduling/</link><pubDate>Sun, 11 May 2025 18:03:14 +0200</pubDate><guid>https://slnotes.blog.castrillon.ch/k8s/scheduling/</guid><description/></item><item><title>Monitoring</title><link>https://slnotes.blog.castrillon.ch/k8s/monitoring/</link><pubDate>Sat, 26 Apr 2025 16:31:04 +0200</pubDate><guid>https://slnotes.blog.castrillon.ch/k8s/monitoring/</guid><description/></item><item><title>AccessControl</title><link>https://slnotes.blog.castrillon.ch/k8s/accesscontrol/</link><pubDate>Thu, 24 Apr 2025 20:26:52 +0200</pubDate><guid>https://slnotes.blog.castrillon.ch/k8s/accesscontrol/</guid><description/></item><item><title>Commands</title><link>https://slnotes.blog.castrillon.ch/k8s/commands/</link><pubDate>Thu, 24 Apr 2025 11:14:18 +0200</pubDate><guid>https://slnotes.blog.castrillon.ch/k8s/commands/</guid><description/></item><item><title>Labels and selectors</title><link>https://slnotes.blog.castrillon.ch/k8s/labels/</link><pubDate>Mon, 21 Apr 2025 15:45:13 +0200</pubDate><guid>https://slnotes.blog.castrillon.ch/k8s/labels/</guid><description>In order to categorize and filter resources of all kinds, K8s uses the concept of labels and selectors. In this sense, resources like Pods, Deployment, Nodes, etc. are created with a set of labels that can then be used by a selector to &amp;ldquo;pick&amp;rdquo; resources and target the correct ones.
Labels are normally added in the metadata field of objects. For example in a pod :
apiVersion: v1 kind: Pod metadata: name: nginx labels: app: app1 tier: frontend spec: containers: - name: nginx image: nginxSelectors are then used in other resources.</description></item><item><title>Architecture</title><link>https://slnotes.blog.castrillon.ch/k8s/arch/</link><pubDate>Fri, 11 Apr 2025 19:26:12 +0200</pubDate><guid>https://slnotes.blog.castrillon.ch/k8s/arch/</guid><description>Cluster Architecture In kubernetes, different machines organize in a cluster. A Kubernetes cluster consists of a control plane (master node) plus a set of worker machines, called nodes, that run containerized applications. Every cluster needs at least one worker node in order to work.
Nodes: This machines run the actual workloads. They have a container runtime that allows to run containers in them. Master: This machines manage the cluster, store information about its workers and monitors them.</description></item><item><title>API Objects</title><link>https://slnotes.blog.castrillon.ch/k8s/api_objects/</link><pubDate>Sat, 12 Oct 2024 11:36:45 +0200</pubDate><guid>https://slnotes.blog.castrillon.ch/k8s/api_objects/</guid><description>Pods Pods are the smallest deployable unit in K8s. They are a &amp;ldquo;logical&amp;rdquo; grouping that encapsulates containers that are to be managed via Kubernetes.
Pods can contain one container (standard use case) or multiple ones that are somehow bundled together (e.g sidecar containers). All containers in the pod share:
Network (can reach each other with localhost) Storage Host (co-located) Schedule (lifecycles are tied to one another) In general, pods are thought to be volatile and replaceable.</description></item><item><title>Background: Containers</title><link>https://slnotes.blog.castrillon.ch/k8s/docker/</link><pubDate>Sat, 12 Oct 2024 10:40:40 +0200</pubDate><guid>https://slnotes.blog.castrillon.ch/k8s/docker/</guid><description>Containers are an OS abstraction that allows to solve the following problems:
Multiple services have different dependencies: Libraries that need to be installed at the OS level are most of the times required to run software on machines. Its not rare that two softwares that run together in a server, might need different versions of the same library, or conflicting libraries to work. Environments are different: When developing software its very difficult to guarantee that the development environment (e.</description></item><item><title>Networking</title><link>https://slnotes.blog.castrillon.ch/k8s/networking/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://slnotes.blog.castrillon.ch/k8s/networking/</guid><description>Definition The networking model in Kubernetes is defined as follows:
Containers inside a pod have their own network namespace and can reference each other using localhost Each node in the cluster has an assigned address pool (e.g 10.244.0.0/24), and pods within the node get assigned an IP from this pool All pods in the cluster are able to communicate with each other without NAT All pods can communicate with the nodes they are placed in or other nodes without NAT Implementation Kubernetes defines how the networking should work, but does not provide an actual implementation.</description></item><item><title>Storage</title><link>https://slnotes.blog.castrillon.ch/k8s/storage/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://slnotes.blog.castrillon.ch/k8s/storage/</guid><description>Kubernetes (K8s) manages containerized applications, but the pods it runs are temporary by design. When a pod stops or moves, any data stored inside its containers is lost. To keep data beyond the lifecycle of a pod, Kubernetes uses a system of volumes and storage resources designed for persistence and flexibility.
CSI (Container Storage interface) At the heart of Kubernetes storage is the Container Storage Interface (CSI), which standardizes how Kubernetes talks to storage providers.</description></item></channel></rss>